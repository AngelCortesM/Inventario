@{
    ViewBag.Title = "Lista de Facturas"; // Define el título de la vista
}

<h4 class="text-center fw-bold mb-4" style="color:#343340;">@ViewBag.Title</h4> <!-- Muestra el título en el encabezado de la página -->
<!-- Campo de búsqueda -->
<div class="container mt-4">
    <div class="mb-3">

        <!-- Grupo de entrada con botones y campo de búsqueda -->
        <div class="input-group" style="overflow-y: auto; /* Desplazamiento horizontal para contenido desbordante */">
            <!-- Botón para crear un nuevo producto -->
            <button class="btn btn-success" onclick="New()">
                <i class="bi-plus-circle"> Crear </i>
            </button>
            <!-- Botón para recargar la lista de productos -->
            <button class="btn btn-primary" onclick="Get()">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
            <!-- Campo de búsqueda con evento para filtrar resultados -->
            <input type="text" id="searchInput" class="form-control" placeholder="Buscar por Numero, Cliente, etc." onkeyup="search()" />
            <button id="exportToExcel" class="btn btn-success">
                <i class="bi bi-file-excel"></i> Exportar todo a Excel
            </button>
            <button id="exportButton" class="btn btn-danger">
                <i class="bi bi-file-pdf"></i> Exportar a PDF
            </button>
        </div>
    </div>
</div>

<!-- Contenedor para el contenido del formulario 'Nuevo' -->
<div id="divNew" class="container">
    <!-- El contenido del formulario 'Nuevo' se cargará aquí -->
</div>

<!-- Contenedor para el contenido del formulario 'Editar' -->
<div id="divEdit" class="container">
    <!-- El contenido del formulario 'Editar' se cargará aquí -->
</div>

<!-- Contenedor para la lista de productos -->
<div id="divLista" class="container-fluid">
    <!-- El contenido de la lista de productos se cargará aquí -->
</div>


<script>
        // Define URLs para operaciones relacionadas 
    const urlNew = "@Url.Content("~/Factura/New")"; // URL para el formulario de nuevo 
    const urlGet = "@Url.Content("~/Factura/List")"; // URL para obtener la lista 
    const urlEdit = "@Url.Content("~/Factura/Edit")"; // URL para el formulario de edición
    const urlGetProveedor = "@Url.Action("GetCliente", "Factura")"; // URL para obtener la lista de clientes
    const urlCreate = "@Url.Content("~/Factura/Save")"; // URL para guardar una nueva Factura

    // Variable para rastrear la visibilidad del formulario 'Nuevo'
    let isNewContentVisible = false;


    /**
     * Función para cargar la lista de productos.
     */
    function Get() {
        fetch(urlGet)
            .then(response => response.text())
            .then(data => {
                document.getElementById("divLista").innerHTML = data;
                attachSortEvents(); // Añade eventos de clic a los encabezados después de cargar los datos
                attachFilterEvents(); // Añade eventos de filtro después de cargar los datos
            });
    }

    // Inicializa la tabla con datos y eventos
    Get();


    /**
 * Función para realizar una búsqueda en toda la tabla.
 */
    function search() {
        // Obtiene el valor del campo de búsqueda y lo convierte a minúsculas
        const query = document.getElementById('searchInput').value.toLowerCase();
        // Selecciona todas las filas de la tabla
        const rows = document.querySelectorAll('#divLista .table tbody tr');

        // Recorre cada fila
        rows.forEach(row => {
            // Selecciona todas las celdas de la fila actual
            const cells = row.querySelectorAll('td');
            // Inicializa una variable para saber si hay coincidencias
            let match = false;

            // Recorre cada celda de la fila
            cells.forEach(cell => {
                // Si el texto de la celda contiene la consulta de búsqueda
                if (cell.textContent.toLowerCase().includes(query)) {
                    match = true; // Marca que hay coincidencia
                }
            });

            // Muestra la fila si hay coincidencia, de lo contrario la oculta
            row.style.display = match ? '' : 'none';
        });
    }


    /**
     * Función para ordenar las columnas de la tabla.
     */
    function sortTable(columnIndex, isNumeric = false) {
        // Selecciona la tabla con el ID 'divLista' y la clase 'table'.
        // Esto obtiene el elemento de la tabla donde se realizará la ordenación.
        const table = document.querySelector('#divLista .table');

        // Obtiene el cuerpo de la tabla (tbody), donde están las filas (tr).
        const tbody = table.querySelector('tbody');

        // Convierte la lista de filas (tr) del cuerpo de la tabla a un array para poder manipularlo.
        const rows = Array.from(tbody.querySelectorAll('tr'));

        // Obtiene la dirección de ordenación actual desde el atributo 'data-sort-direction' de la tabla.
        // Si no se encuentra, se asume que es 'asc' (ascendente).
        const currentDirection = table.getAttribute('data-sort-direction') || 'asc';

        // Determina la nueva dirección de ordenación: si la actual es 'asc', cambia a 'desc' y viceversa.
        const newDirection = currentDirection === 'asc' ? 'desc' : 'asc';

        // Ordena las filas en base al contenido de la columna especificada por 'columnIndex'.
        rows.sort((a, b) => {
            // Obtiene el texto de la celda de la columna especificada para las filas 'a' y 'b'.
            // 'columnIndex + 1' porque los índices de columnas en CSS son basados en 1.
            const aText = a.querySelector(`td:nth-child(${columnIndex + 1})`).textContent.trim();
            const bText = b.querySelector(`td:nth-child(${columnIndex + 1})`).textContent.trim();

            // Si 'isNumeric' es true, realiza una comparación numérica.
            if (isNumeric) {
                return newDirection === 'asc'
                    ? parseFloat(aText) - parseFloat(bText) // Ordena ascendente
                    : parseFloat(bText) - parseFloat(aText); // Ordena descendente
            } else {
                // Si 'isNumeric' es false, realiza una comparación alfabética.
                return newDirection === 'asc'
                    ? aText.localeCompare(bText) // Ordena ascendente
                    : bText.localeCompare(aText); // Ordena descendente
            }
        });

        // Actualiza el atributo 'data-sort-direction' de la tabla con la nueva dirección de ordenación.
        table.setAttribute('data-sort-direction', newDirection);

        // Limpia el contenido actual del cuerpo de la tabla.
        tbody.innerHTML = '';

        // Reanexa las filas en el nuevo orden al cuerpo de la tabla.
        rows.forEach(row => tbody.appendChild(row));
    }

    /**
     * Añade eventos de ordenación a los encabezados de columna.
     */
    function attachSortEvents() {
        document.querySelectorAll('#divLista .table th').forEach((th, index) => {
            th.addEventListener('click', () => {
                const isNumeric = th.classList.contains('numeric-column');
                sortTable(index, isNumeric);
            });
        });
    }

    /**
     * Función para filtrar filas por columna específica.

     */
    function filterColumn(columnIndex) {
        const filterValue = document.querySelectorAll('.column-filter')[columnIndex].value.toLowerCase();
        const rows = document.querySelectorAll('#divLista .table tbody tr');

        rows.forEach(row => {
            const cell = row.querySelectorAll('td')[columnIndex];
            const cellText = cell.textContent.toLowerCase();
            row.style.display = cellText.includes(filterValue) ? '' : 'none';
        });
    }

    /**
     * Añade eventos de entrada a los campos de filtro.
     */
    function attachFilterEvents() {
        document.querySelectorAll('.column-filter').forEach((input, index) => {
            input.addEventListener('input', () => filterColumn(index));
        });
    }

    //funcion apra exportar a excel
    document.getElementById('exportToExcel').addEventListener('click', function () {
        const table = document.querySelector('#divLista .table');
        const wb = XLSX.utils.book_new();

        // Obtener las cabeceras desde los placeholders de los inputs
        const headers = Array.from(table.querySelectorAll('thead .header-input-container input')).map(input => input.placeholder.trim());
        console.log('Headers:', headers);

        // Obtener las filas de la tabla
        const rows = Array.from(table.querySelectorAll('tbody tr')).map(tr => {
            const cells = Array.from(tr.querySelectorAll('td')).map(td => td.innerText.trim());
            console.log('Row Cells:', cells); // Imprimir celdas de cada fila
            return cells;
        });

        // Verificar que se obtuvieron correctamente las cabeceras y las filas
        console.log('Rows:', rows);

        // Convertir en una hoja de cálculo
        const ws = XLSX.utils.aoa_to_sheet([headers, ...rows]);
        XLSX.utils.book_append_sheet(wb, ws, 'Clientes');

        // Exportar el archivo
        XLSX.writeFile(wb, 'tabla_clientes.xlsx');
    });

    // Función para exportar a PDF
    document.getElementById('exportButton').addEventListener('click', function () {
        html2canvas(document.querySelector('#divLista')).then(canvas => {
            const imgData = canvas.toDataURL('image/png');
            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF('p', 'mm', 'a4');

            // Agregar el logo
            const logoImg = '/Content/images/logo.png'; // Reemplaza con la ruta a tu imagen
            pdf.addImage(logoImg, 'PNG', 10, 10, 30, 30);

            // Agregar el nombre de la empresa
            pdf.setFontSize(13);
            pdf.text('On / Off Soluciones en linea', 50, 15);

            // Agregar otros detalles
            pdf.setFontSize(11);
            pdf.text('Dirección de la Empresa', 50, 20);
            pdf.text('Teléfono: (123) 456-7890', 50, 25);
            pdf.text('Email: contacto@empresa.com', 50, 30);

            // Agregar la tabla
            const imgWidth = 210; // Ancho de la página en mm
            const pageHeight = 295; // Altura de la página en mm
            const imgHeight = canvas.height * imgWidth / canvas.width;
            let heightLeft = imgHeight;

            let position = 42; // Ajusta la posición para que esté debajo del encabezado
            pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
            heightLeft -= pageHeight;

            while (heightLeft >= 0) {
                position = heightLeft - imgHeight;
                pdf.addPage();
                pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
                heightLeft -= pageHeight;
            }

            pdf.save('tabla.pdf');
        });
    });
</script>